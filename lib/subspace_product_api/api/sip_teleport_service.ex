# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule SubspaceProductAPI.Api.SipTeleportService do
  @moduledoc """
  API calls for all endpoints tagged `SipTeleportService`.
  """

  alias SubspaceProductAPI.Connection
  import SubspaceProductAPI.RequestBuilder


  @doc """
  CreateSipTeleport
  CreateSipTeleport creates a new SIP Teleport

  ## Parameters

  - connection (SubspaceProductAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, SubspaceProductAPI.Model.V1SipTeleportResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec sip_teleport_service_create(Tesla.Env.client, keyword()) :: {:ok, SubspaceProductAPI.Model.V1SipTeleportResponse.t} | {:ok, Map.t} | {:ok, SubspaceProductAPI.Model.RpcStatus.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def sip_teleport_service_create(connection, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/v1/sip-teleports")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %SubspaceProductAPI.Model.V1SipTeleportResponse{}},
      { 401, false},
      { 404, false},
      { :default, %SubspaceProductAPI.Model.RpcStatus{}}
    ])
  end

  @doc """
  DeleteSipTeleport
  DeleteSipTeleport deletes an existing SIP Teleport, specified by its id

  ## Parameters

  - connection (SubspaceProductAPI.Connection): Connection to server
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, SubspaceProductAPI.Model.V1SipTeleportResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec sip_teleport_service_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, SubspaceProductAPI.Model.V1SipTeleportResponse.t} | {:ok, Map.t} | {:ok, SubspaceProductAPI.Model.RpcStatus.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def sip_teleport_service_delete(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v1/sip-teleports/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %SubspaceProductAPI.Model.V1SipTeleportResponse{}},
      { 401, false},
      { 404, false},
      { :default, %SubspaceProductAPI.Model.RpcStatus{}}
    ])
  end

  @doc """
  GetSipTeleport
  GetSipTeleport fetches the details of a specific SIP Teleport, specified by its id

  ## Parameters

  - connection (SubspaceProductAPI.Connection): Connection to server
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, SubspaceProductAPI.Model.V1SipTeleportResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec sip_teleport_service_get(Tesla.Env.client, String.t, keyword()) :: {:ok, SubspaceProductAPI.Model.V1SipTeleportResponse.t} | {:ok, Map.t} | {:ok, SubspaceProductAPI.Model.RpcStatus.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def sip_teleport_service_get(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v1/sip-teleports/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %SubspaceProductAPI.Model.V1SipTeleportResponse{}},
      { 401, false},
      { 404, false},
      { :default, %SubspaceProductAPI.Model.RpcStatus{}}
    ])
  end

  @doc """
  ListSipTeleports
  ListSipTeleports lists all SIP Teleports

  ## Parameters

  - connection (SubspaceProductAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :before (String.t): 
    - :limit (integer()): 
  ## Returns

  {:ok, SubspaceProductAPI.Model.V1ListSipTeleportResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec sip_teleport_service_list(Tesla.Env.client, keyword()) :: {:ok, SubspaceProductAPI.Model.V1ListSipTeleportResponse.t} | {:ok, Map.t} | {:ok, SubspaceProductAPI.Model.RpcStatus.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def sip_teleport_service_list(connection, opts \\ []) do
    optional_params = %{
      :"before" => :query,
      :"limit" => :query
    }
    %{}
    |> method(:get)
    |> url("/v1/sip-teleports")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %SubspaceProductAPI.Model.V1ListSipTeleportResponse{}},
      { 401, false},
      { 404, false},
      { :default, %SubspaceProductAPI.Model.RpcStatus{}}
    ])
  end

  @doc """
  UpdateSipTeleport
  UpdateSipTeleport updates an existing SIP Teleport, specified by its id

  ## Parameters

  - connection (SubspaceProductAPI.Connection): Connection to server
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, SubspaceProductAPI.Model.V1SipTeleportResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec sip_teleport_service_update(Tesla.Env.client, String.t, keyword()) :: {:ok, SubspaceProductAPI.Model.V1SipTeleportResponse.t} | {:ok, Map.t} | {:ok, SubspaceProductAPI.Model.RpcStatus.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def sip_teleport_service_update(connection, id, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/v1/sip-teleports/#{id}")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %SubspaceProductAPI.Model.V1SipTeleportResponse{}},
      { 401, false},
      { 404, false},
      { :default, %SubspaceProductAPI.Model.RpcStatus{}}
    ])
  end
end
