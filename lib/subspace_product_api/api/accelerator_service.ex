# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule SubspaceProductAPI.Api.AcceleratorService do
  @moduledoc """
  API calls for all endpoints tagged `AcceleratorService`.
  """

  alias SubspaceProductAPI.Connection
  import SubspaceProductAPI.RequestBuilder


  @doc """
  CreateAccelerator
  CreateAccelerator generates a new PacketAccelerator

  ## Parameters

  - connection (SubspaceProductAPI.Connection): Connection to server
  - body (Body): Required parameters to create a new PacketAccelerator.  NOTE- only subspace_port is optional
  - opts (KeywordList): [optional] Optional parameters
    - :idempotency_key (String.t): Value is the returned etag of a get request.  If a retry sends an Idempotency-Key that has been seen before, the existing accelerator is returned with the status code of 200
  ## Returns

  {:ok, SubspaceProductAPI.Model.V1Accelerator.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec accelerator_service_create(Tesla.Env.client, SubspaceProductAPI.Model.Body.t, keyword()) :: {:ok, SubspaceProductAPI.Model.V1Accelerator.t} | {:ok, Map.t} | {:ok, SubspaceProductAPI.Model.RpcStatus.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def accelerator_service_create(connection, body, opts \\ []) do
    optional_params = %{
      :"Idempotency-Key" => :headers
    }
    %{}
    |> method(:post)
    |> url("/v1/accelerators")
    |> add_param(:body, :body, body)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %SubspaceProductAPI.Model.V1Accelerator{}},
      { 401, false},
      { 404, false},
      { 201, false},
      { :default, %SubspaceProductAPI.Model.RpcStatus{}}
    ])
  end

  @doc """
  DeleteAccelerator
  DeleteAccelerator deletes the given PacketAccelerator, specified by its id

  ## Parameters

  - connection (SubspaceProductAPI.Connection): Connection to server
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec accelerator_service_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:ok, SubspaceProductAPI.Model.RpcStatus.t} | {:error, Tesla.Env.t}
  def accelerator_service_delete(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/v1/accelerators/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 401, false},
      { 404, false},
      { :default, %SubspaceProductAPI.Model.RpcStatus{}}
    ])
  end

  @doc """
  GetAccelerator
  GetAccelerator returns the details of a given PacketAccelerator, specified by its id

  ## Parameters

  - connection (SubspaceProductAPI.Connection): Connection to server
  - id (String.t): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, SubspaceProductAPI.Model.V1Accelerator.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec accelerator_service_get(Tesla.Env.client, String.t, keyword()) :: {:ok, SubspaceProductAPI.Model.V1Accelerator.t} | {:ok, Map.t} | {:ok, SubspaceProductAPI.Model.RpcStatus.t} | {:error, Tesla.Env.t}
  def accelerator_service_get(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/v1/accelerators/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %SubspaceProductAPI.Model.V1Accelerator{}},
      { 401, false},
      { 404, false},
      { :default, %SubspaceProductAPI.Model.RpcStatus{}}
    ])
  end

  @doc """
  ListAccelerators
  ListAccelerators returns a list of all existing PacketAccelerators.

  ## Parameters

  - connection (SubspaceProductAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :before (String.t): 
    - :limit (integer()): 
    - :q (String.t): q Provides a query string which filters accelerators in the response.
  ## Returns

  {:ok, SubspaceProductAPI.Model.V1ListAcceleratorsResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec accelerator_service_list(Tesla.Env.client, keyword()) :: {:ok, SubspaceProductAPI.Model.V1ListAcceleratorsResponse.t} | {:ok, Map.t} | {:ok, SubspaceProductAPI.Model.RpcStatus.t} | {:error, Tesla.Env.t}
  def accelerator_service_list(connection, opts \\ []) do
    optional_params = %{
      :"before" => :query,
      :"limit" => :query,
      :"q" => :query
    }
    %{}
    |> method(:get)
    |> url("/v1/accelerators")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %SubspaceProductAPI.Model.V1ListAcceleratorsResponse{}},
      { 401, false},
      { 404, false},
      { :default, %SubspaceProductAPI.Model.RpcStatus{}}
    ])
  end

  @doc """
  UpdateAccelerator
  UpdateAccelerator updates an existing accelerator, specified by its id

  ## Parameters

  - connection (SubspaceProductAPI.Connection): Connection to server
  - id (String.t): 
  - body1 (Body1): Parameters to update an existing PacketAccelerator, minimum requirement of one of them defined to update
  - opts (KeywordList): [optional] Optional parameters
    - :if_match (integer()): 
  ## Returns

  {:ok, SubspaceProductAPI.Model.V1Accelerator.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec accelerator_service_update(Tesla.Env.client, String.t, SubspaceProductAPI.Model.Body1.t, keyword()) :: {:ok, SubspaceProductAPI.Model.V1Accelerator.t} | {:ok, Map.t} | {:ok, SubspaceProductAPI.Model.RpcStatus.t} | {:ok, String.t} | {:error, Tesla.Env.t}
  def accelerator_service_update(connection, id, body1, opts \\ []) do
    optional_params = %{
      :"If-Match" => :headers
    }
    %{}
    |> method(:put)
    |> url("/v1/accelerators/#{id}")
    |> add_param(:body, :body, body1)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %SubspaceProductAPI.Model.V1Accelerator{}},
      { 401, false},
      { 404, false},
      { 409, false},
      { :default, %SubspaceProductAPI.Model.RpcStatus{}}
    ])
  end
end
